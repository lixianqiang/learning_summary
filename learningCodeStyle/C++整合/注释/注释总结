版权声明
声明格式1
   Copyright(C) Huawei Technology Co., Ltd. 1998-2011. All right reserved
声明格式2
   Copyright(C), 1998-2011 Huawei Technology. Co., Ltd.
1998-2011根据实际需要可以修改，1998是文件首次创建年份，2011是文件最新修改年份


说明性文件注释（头文件 .h 文件， .inc 文件， .def 文件， .cfg 编译说明文件等）
说明性文件头部注释必须列出：
版权说明、版本号、生成日期、作者、工号、内容、功能、与其他文件的关系、修改日志。
头文件注释中还应有对函数功能和用法的简要说明
/**************************************************************
Copyright(C), 1998-1999 Huawei Technology Co., Ltd.
FileName:  // 文件名
Author:            ID(可选):			Version:           Date:
Description:	// 详细说明该文件完成的主要功能，与其他模块
				// 函数接口，输出值，取值范围，含义
				// 以及参数间的控制，顺序，独立与依赖关系
Others:  	// 其他内容说明
Function List(可选):		// 主要函数列表，每条记录应包括函数名及功能简要说明
	1， ...
Histiory:	// 修改历史记录表，内容包括：修改日期，修改者
			// 以及修改内容简述
	1，	Date:
		Author:
		Modification:
	2，	...
**************************************************************/


源文件
源文件头部注释必须列出：
版权说明、版本号、生成日期、作者、模块目的/功能、主要函数及其功能、修改日志。
/*************************************************************
Copyright(C) Huawei Technology Co., Ltd. 1998-2011. All right reserved
FileName: 
Author:             Version:           Date:
Description:   // 描述本文件的内容、功能内部各部分之间的关系
               // 以及本文件与其他文件的关系
Version:    // 版本信息
Function List:    // 主要函数及其功能
   1, .......
Histiory:   // 修改历史记录表，内容包括：修改日期，修改者
            // 以及修改内容简述
   <author>    <time>         <version>   <desc>
   David       2020/10/12     1.0         ....
*************************************************************/


函数
函数头部注释必须列出：
函数目的/功能、输入参数、输出参数、返回值、调用关系（函数、表）等
/*************************************************************
Function:   // 函数名称
Description:   // 函数功能、性能、用法等描述
Calls(可选):    // 被本函数调用的函数清单
Called By(可选):    // 调用本函数的函数清单
Table Accessed(可选):    // 被访问的表
Table Updated(可选):     // 被修改的表
Input:   // 输入参数说明 包括每个参数的作用、取值关系以及参数间关系
OutPut:  // 对输出参数的说明
Return:  // 函数返回值说明
Others:  // 其他说明
*************************************************************/

全局变量
要有较详细的注释，包括对其功能，取值范围以及存取时注意事项等的说明
/* The ErrorCode when SCCP translate */
/* Global Title failure, as follows */
/* 0 -- SUCCESS  1 -- GT Table error */
/* 2 -- GT error others -- not in use */
/* only function SCCPTranslate() in */
/* this modual can modify it, and other */
/* module can visit it through call */
/* the function GetGTTransErrorCode() */
BYTE g_GTTranErrorCode;

doxygen(javadoc)格式
文档注释
在开始的 /** 之后，第一行或几行是关于类、变量和方法的主要描述。
之后，你可以包含一个或多个各种各样的 @ 标签。
每一个 @ 标签必须在一个新行的开始或者在一行的开始紧跟星号(*).
多个相同类型的标签应该放成一组。

头文件注释
/**
* @file		// 文件名
* @brief 	// 文件功能的简述
* @version 1.1		// 版本号
* @author 	// 作者
* @date 	// 文件创建日期
*/

函数注释
注释写在声明处，只对重要的、复杂的、以及对外提供使用的接口函数进行注释
/**
* @description		// 函数简要说明
* @param arg1		// 参数1
* @param arg2 		// 参数2
* @return 		//成功，
* 				//失败，
*/

如下所示
/**
* 这个类演示了文档注释
* @author Ayan Amhed
* @version 1.2
*/
public class SquareNum 
{
   /**
   * This method returns the square of num.
   * This is a multiline description. You can use
   * as many lines as you like.
   * @param num The value to be squared.
   * @return num squared.
   */
   public double square(double num) 
   {
      return num * num;
   }

   /**
   * This method inputs a number from the user.
   * @return The value input as a double.
   * @exception IOException On input error.
   * @see IOException
   */
   public double getNumber() throws IOException 
   {
      InputStreamReader isr = new InputStreamReader(System.in);
      BufferedReader inData = new BufferedReader(isr);
      String str;
      str = inData.readLine();
      return (new Double(str)).doubleValue();
   }

   /**
   * This method demonstrates square().
   * @param args Unused.
   * @return Nothing.
   * @exception IOException On input error.
   * @see IOException
   */
   public static void main(String args[]) throws IOException
   {
      SquareNum ob = new SquareNum();
      double val;
      System.out.println("Enter value to be squared: ");
      val = ob.getNumber();
      val = ob.square(val);
      System.out.println("Squared value is " + val);
   }
}

@author	标识一个类的作者	@author description
@param	说明一个方法的参数	@param parameter-name explanation
@deprecated	指名一个过期的类或成员	@deprecated description
@return	说明返回值类型	@return explanation
@version	指定类的版本	@version info
@value	显示常量的值，该常量必须是static属性。	Displays the value of a constant, which must be a static field.
@docRoot	指明当前文档根目录的路径	Directory Path
@exception	标志一个类抛出的异常	@exception exception-name explanation
@inheritDoc	从直接父类继承的注释	Inherits a comment from the immediate surperclass.


注释方案1
   代码前注释（块注释） /* ... */
   代码行注释（行注释） // ...

注释方案2
   代码前注释（块注释） // ...
   代码行注释（行注释） // ...

注释应放在其代码上方相邻位置或右侧
若放于上方需与其上面的代码用空行隔开，且与下方代码缩进相同
如下所示：
int tmp = 10

/* active statistic task number */
const int MAX_ACT_TASK_NUMBER = 1000


行注释时，需在行尾空两格进行注释.
注释符与注释内容之间要用一个空格进行分隔
如需连续进行多行注释, 使之对齐以获得更好的可读性
如下所示：
#define MAX_ACT_TASK_NUMBER 1000    // active statistic task number
                                    // ......
                                    // ......

TODO注释
注释要使用全大写字符串 'TODO' 
在 'TODO' 一词后, 在括号里留下名字，邮件地址，其他身份标识和与这一 ‘TODO’ 相关的issue。
写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.
如果加 TODO 是为了在 “将来某一天做某事”, 可以附上一个非常明确的时间 “Fix by November 2005”),
或者一个明确的事项 (“Remove this code when all clients can handle XML responses.”).
如下所示：
// TODO(kl@gmail.com): Use a "*" here for concatenation operator.
// TODO(Zeke) change this to use relations.
// TODO(bug 12345): remove the "Last visitors" feature


弃用注释
注释要使用全大写字符串 'DEPRECATED'
注释放在接口声明前,以标记某接口为弃用状态.
在 'DEPRECATED' 一词后, 在括号中留下名字, 邮箱地址以及其他身份标识.


修改代码时，维护代码周边的所有注释，以保证注释与代码的一致性，不再有用的注释要删除

注释函数重载时, 注释的重点应该是函数中被重载的部分, 而不是简单的重复被重载的函数的注释. 
多数情况下, 函数重载不需要额外的文档, 因此也没有必要加上注释.

注释构造/析构函数时, 应当注明的是注明构造函数对参数做了什么 (例如, 是否取得指针所有权) 
以及析构函数清理了什么. 如果都是些无关紧要的内容, 直接省掉注释. 析构函数前没有注释是很正常的.

注释应考虑程序员易读性以及外观排版的因素，使用的语言是中，英兼有。
建议多使用中文，除非能用非常流利准确的英文表达。对于有外籍员工，有产品确定注释语言
说明：注释语言不统一，影响程序易读性和外观排版，出于对维护人员的考虑，建议使用中文。